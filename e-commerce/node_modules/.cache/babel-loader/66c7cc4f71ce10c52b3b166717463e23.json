{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchAPI } from '../../utils/dataFetching';\nconst initialState = {\n  products: [],\n  count: 0,\n  total: 0\n};\nexport const getCart = createAsyncThunk('cart/getCart', async (_, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const requestObject = {\n      method: 'GET',\n      url: 'cart'\n    };\n    const {\n      data,\n      message\n    } = await fetchAPI(requestObject);\n    return {\n      data,\n      message\n    };\n  } catch (err) {\n    console.error(err);\n    return rejectWithValue(err);\n  }\n});\nexport const saveCart = createAsyncThunk('cart/saveCart', async (_, _ref2) => {\n  let {\n    rejectWithValue,\n    getState\n  } = _ref2;\n\n  try {\n    const {\n      products,\n      count,\n      total\n    } = getState().cart;\n    const requestObject = {\n      url: 'save/cart',\n      method: 'POST',\n      body: {\n        products: readyCartData(products),\n        count,\n        total\n      }\n    };\n    const {\n      message\n    } = await fetchAPI(requestObject);\n    return {\n      message\n    };\n  } catch (err) {\n    console.error(err);\n    return rejectWithValue(err);\n  }\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addProduct(state, _ref3) {\n      let {\n        payload\n      } = _ref3;\n      const product = state.products.find(p => p.data.id === payload.id);\n      if (product) product.count += 1;else state.products.push({\n        data: payload,\n        count: 1\n      });\n      state.total = fixPrecision(state.total + getFinalPrice(payload.amount, payload.sale));\n      state.count += 1;\n    },\n\n    removeProduct(state, _ref4) {\n      let {\n        payload: {\n          id\n        }\n      } = _ref4;\n      state.products = state.products.filter(product => {\n        if (product.data.id === id) {\n          state.count -= product.count;\n          state.total = fixPrecision(state.total - getFinalPrice(product.data.amount, product.data.sale, product.count));\n          return false;\n        }\n\n        return true;\n      });\n    },\n\n    increaseCount(state, _ref5) {\n      let {\n        payload: {\n          id\n        }\n      } = _ref5;\n      state.products = state.products.map(product => {\n        if (product.data.id === id) {\n          state.count += 1;\n          state.total = fixPrecision(state.total + getFinalPrice(product.data.amount, product.data.sale));\n          product.count += 1;\n        }\n\n        return product;\n      });\n    },\n\n    decreaseCount(state, _ref6) {\n      let {\n        payload: {\n          id\n        }\n      } = _ref6;\n      state.products = state.products.filter(product => {\n        if (product.data.id === id) {\n          state.count -= 1;\n          state.total = fixPrecision(state.total - getFinalPrice(product.data.amount, product.data.sale));\n          product.count -= 1;\n          if (product.count === 0) return false;\n        }\n\n        return true;\n      });\n    },\n\n    empty(state) {\n      state.products = [];\n      state.count = 0;\n      state.total = 0;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getCart.fulfilled, (state, _ref7) => {\n      let {\n        payload: {\n          data\n        }\n      } = _ref7;\n\n      if (data.empty) {\n        state.count = 0;\n        state.total = 0;\n        state.products = [];\n      } else {\n        state.count = data.count;\n        state.total = data.total;\n        state.products = data.products.map(_ref8 => {\n          let {\n            product,\n            quantity\n          } = _ref8;\n          return {\n            data: filterAction(product),\n            count: quantity\n          };\n        });\n      }\n    });\n    builder.addDefaultCase(state => state);\n  }\n});\nexport const readyCartData = products => {\n  return products.map(product => ({\n    id: product.data.id,\n    count: product.count\n  }));\n};\nexport const filterAction = payload => {\n  return {\n    id: payload.id,\n    title: payload.title,\n    subtitle: payload.subtitle,\n    image: payload.image,\n    amount: payload.amount,\n    sale: payload.sale\n  };\n};\nexport const getFinalPrice = function (amount, sale) {\n  let count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return fixPrecision((amount - amount * sale / 100) * count);\n};\nexport const fixPrecision = amount => {\n  return Number(parseFloat(amount).toFixed(2));\n};\nexport const {\n  addProduct,\n  removeProduct,\n  empty,\n  increaseCount,\n  decreaseCount\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/yukta/Desktop/personal-projects-main/e-commerce/src/redux/slices/cartSlice.js"],"names":["createAsyncThunk","createSlice","fetchAPI","initialState","products","count","total","getCart","_","rejectWithValue","requestObject","method","url","data","message","err","console","error","saveCart","getState","cart","body","readyCartData","cartSlice","name","reducers","addProduct","state","payload","product","find","p","id","push","fixPrecision","getFinalPrice","amount","sale","removeProduct","filter","increaseCount","map","decreaseCount","empty","extraReducers","builder","addCase","fulfilled","quantity","filterAction","addDefaultCase","title","subtitle","image","Number","parseFloat","toFixed","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,KAAK,EAAE,CAFU;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,OAAO,GAAGP,gBAAgB,CACnC,cADmC,EAEnC,OAAOQ,CAAP,WAAkC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AAC9B,MAAI;AACA,UAAMC,aAAa,GAAG;AAClBC,MAAAA,MAAM,EAAE,KADU;AAElBC,MAAAA,GAAG,EAAE;AAFa,KAAtB;AAKA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoB,MAAMZ,QAAQ,CAACQ,aAAD,CAAxC;AACA,WAAO;AAAEG,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACH,GARD,CAQE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAON,eAAe,CAACM,GAAD,CAAtB;AACH;AACJ,CAfkC,CAAhC;AAkBP,OAAO,MAAMG,QAAQ,GAAGlB,gBAAgB,CACpC,eADoC,EAEpC,OAAOQ,CAAP,YAA4C;AAAA,MAAlC;AAAEC,IAAAA,eAAF;AAAmBU,IAAAA;AAAnB,GAAkC;;AACxC,MAAI;AACA,UAAM;AAAEf,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,QAA6Ba,QAAQ,GAAGC,IAA9C;AAEA,UAAMV,aAAa,GAAG;AAClBE,MAAAA,GAAG,EAAE,WADa;AAElBD,MAAAA,MAAM,EAAE,MAFU;AAGlBU,MAAAA,IAAI,EAAE;AACFjB,QAAAA,QAAQ,EAAEkB,aAAa,CAAClB,QAAD,CADrB;AAEFC,QAAAA,KAFE;AAGFC,QAAAA;AAHE;AAHY,KAAtB;AAUA,UAAM;AAAEQ,MAAAA;AAAF,QAAc,MAAMZ,QAAQ,CAACQ,aAAD,CAAlC;AACA,WAAO;AAAEI,MAAAA;AAAF,KAAP;AACH,GAfD,CAeE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,WAAON,eAAe,CAACM,GAAD,CAAtB;AACH;AACJ,CAtBmC,CAAjC;AAyBP,MAAMQ,SAAS,GAAGtB,WAAW,CAAC;AAC1BuB,EAAAA,IAAI,EAAE,MADoB;AAE1BrB,EAAAA,YAF0B;AAG1BsB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,SAAqB;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAC3B,YAAMC,OAAO,GAAGF,KAAK,CAACvB,QAAN,CAAe0B,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAAClB,IAAF,CAAOmB,EAAP,KAAcJ,OAAO,CAACI,EAA/C,CAAhB;AAEA,UAAIH,OAAJ,EAAaA,OAAO,CAACxB,KAAR,IAAiB,CAAjB,CAAb,KACKsB,KAAK,CAACvB,QAAN,CAAe6B,IAAf,CAAoB;AAAEpB,QAAAA,IAAI,EAAEe,OAAR;AAAiBvB,QAAAA,KAAK,EAAE;AAAxB,OAApB;AAELsB,MAAAA,KAAK,CAACrB,KAAN,GAAc4B,YAAY,CAACP,KAAK,CAACrB,KAAN,GAAc6B,aAAa,CAACP,OAAO,CAACQ,MAAT,EAAiBR,OAAO,CAACS,IAAzB,CAA5B,CAA1B;AACAV,MAAAA,KAAK,CAACtB,KAAN,IAAe,CAAf;AACH,KATK;;AAUNiC,IAAAA,aAAa,CAACX,KAAD,SAA6B;AAAA,UAArB;AAAEC,QAAAA,OAAO,EAAE;AAAEI,UAAAA;AAAF;AAAX,OAAqB;AACtCL,MAAAA,KAAK,CAACvB,QAAN,GAAiBuB,KAAK,CAACvB,QAAN,CAAemC,MAAf,CAAsBV,OAAO,IAAI;AAC9C,YAAIA,OAAO,CAAChB,IAAR,CAAamB,EAAb,KAAoBA,EAAxB,EAA4B;AACxBL,UAAAA,KAAK,CAACtB,KAAN,IAAewB,OAAO,CAACxB,KAAvB;AACAsB,UAAAA,KAAK,CAACrB,KAAN,GAAc4B,YAAY,CAACP,KAAK,CAACrB,KAAN,GAAc6B,aAAa,CAACN,OAAO,CAAChB,IAAR,CAAauB,MAAd,EAAsBP,OAAO,CAAChB,IAAR,CAAawB,IAAnC,EAAyCR,OAAO,CAACxB,KAAjD,CAA5B,CAA1B;AACA,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH,OAPgB,CAAjB;AAQH,KAnBK;;AAoBNmC,IAAAA,aAAa,CAACb,KAAD,SAA6B;AAAA,UAArB;AAAEC,QAAAA,OAAO,EAAE;AAAEI,UAAAA;AAAF;AAAX,OAAqB;AACtCL,MAAAA,KAAK,CAACvB,QAAN,GAAiBuB,KAAK,CAACvB,QAAN,CAAeqC,GAAf,CAAmBZ,OAAO,IAAI;AAC3C,YAAIA,OAAO,CAAChB,IAAR,CAAamB,EAAb,KAAoBA,EAAxB,EAA4B;AACxBL,UAAAA,KAAK,CAACtB,KAAN,IAAe,CAAf;AACAsB,UAAAA,KAAK,CAACrB,KAAN,GAAc4B,YAAY,CAACP,KAAK,CAACrB,KAAN,GAAc6B,aAAa,CAACN,OAAO,CAAChB,IAAR,CAAauB,MAAd,EAAsBP,OAAO,CAAChB,IAAR,CAAawB,IAAnC,CAA5B,CAA1B;AACAR,UAAAA,OAAO,CAACxB,KAAR,IAAiB,CAAjB;AACH;;AACD,eAAOwB,OAAP;AACH,OAPgB,CAAjB;AAQH,KA7BK;;AA8BNa,IAAAA,aAAa,CAACf,KAAD,SAA6B;AAAA,UAArB;AAAEC,QAAAA,OAAO,EAAE;AAAEI,UAAAA;AAAF;AAAX,OAAqB;AACtCL,MAAAA,KAAK,CAACvB,QAAN,GAAiBuB,KAAK,CAACvB,QAAN,CAAemC,MAAf,CAAsBV,OAAO,IAAI;AAC9C,YAAIA,OAAO,CAAChB,IAAR,CAAamB,EAAb,KAAoBA,EAAxB,EAA4B;AACxBL,UAAAA,KAAK,CAACtB,KAAN,IAAe,CAAf;AACAsB,UAAAA,KAAK,CAACrB,KAAN,GAAc4B,YAAY,CAACP,KAAK,CAACrB,KAAN,GAAc6B,aAAa,CAACN,OAAO,CAAChB,IAAR,CAAauB,MAAd,EAAsBP,OAAO,CAAChB,IAAR,CAAawB,IAAnC,CAA5B,CAA1B;AACAR,UAAAA,OAAO,CAACxB,KAAR,IAAiB,CAAjB;AACA,cAAIwB,OAAO,CAACxB,KAAR,KAAkB,CAAtB,EAAyB,OAAO,KAAP;AAC5B;;AACD,eAAO,IAAP;AACH,OARgB,CAAjB;AASH,KAxCK;;AAyCNsC,IAAAA,KAAK,CAAChB,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACvB,QAAN,GAAiB,EAAjB;AACAuB,MAAAA,KAAK,CAACtB,KAAN,GAAc,CAAd;AACAsB,MAAAA,KAAK,CAACrB,KAAN,GAAc,CAAd;AACH;;AA7CK,GAHgB;AAkD1BsC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBvC,OAAO,CAACwC,SAAxB,EAAmC,CAACpB,KAAD,YAAkC;AAAA,UAA1B;AAAEC,QAAAA,OAAO,EAAE;AAAEf,UAAAA;AAAF;AAAX,OAA0B;;AACjE,UAAIA,IAAI,CAAC8B,KAAT,EAAgB;AACZhB,QAAAA,KAAK,CAACtB,KAAN,GAAc,CAAd;AACAsB,QAAAA,KAAK,CAACrB,KAAN,GAAc,CAAd;AACAqB,QAAAA,KAAK,CAACvB,QAAN,GAAiB,EAAjB;AACH,OAJD,MAIO;AACHuB,QAAAA,KAAK,CAACtB,KAAN,GAAcQ,IAAI,CAACR,KAAnB;AACAsB,QAAAA,KAAK,CAACrB,KAAN,GAAcO,IAAI,CAACP,KAAnB;AACAqB,QAAAA,KAAK,CAACvB,QAAN,GAAiBS,IAAI,CAACT,QAAL,CAAcqC,GAAd,CAAkB;AAAA,cAAC;AAAEZ,YAAAA,OAAF;AAAWmB,YAAAA;AAAX,WAAD;AAAA,iBAA4B;AAAEnC,YAAAA,IAAI,EAAEoC,YAAY,CAACpB,OAAD,CAApB;AAA+BxB,YAAAA,KAAK,EAAE2C;AAAtC,WAA5B;AAAA,SAAlB,CAAjB;AACH;AACJ,KAVD;AAWAH,IAAAA,OAAO,CAACK,cAAR,CAAuBvB,KAAK,IAAIA,KAAhC;AACH;AA/DyB,CAAD,CAA7B;AAkEA,OAAO,MAAML,aAAa,GAAIlB,QAAD,IAAc;AACvC,SAAOA,QAAQ,CAACqC,GAAT,CAAaZ,OAAO,KACvB;AACIG,IAAAA,EAAE,EAAEH,OAAO,CAAChB,IAAR,CAAamB,EADrB;AAEI3B,IAAAA,KAAK,EAAEwB,OAAO,CAACxB;AAFnB,GADuB,CAApB,CAAP;AAMH,CAPM;AASP,OAAO,MAAM4C,YAAY,GAAIrB,OAAD,IAAa;AACrC,SAAO;AACHI,IAAAA,EAAE,EAAEJ,OAAO,CAACI,EADT;AAEHmB,IAAAA,KAAK,EAAEvB,OAAO,CAACuB,KAFZ;AAGHC,IAAAA,QAAQ,EAAExB,OAAO,CAACwB,QAHf;AAIHC,IAAAA,KAAK,EAAEzB,OAAO,CAACyB,KAJZ;AAKHjB,IAAAA,MAAM,EAAER,OAAO,CAACQ,MALb;AAMHC,IAAAA,IAAI,EAAET,OAAO,CAACS;AANX,GAAP;AAQH,CATM;AAWP,OAAO,MAAMF,aAAa,GAAG,UAACC,MAAD,EAASC,IAAT,EAA6B;AAAA,MAAdhC,KAAc,uEAAN,CAAM;AACtD,SAAO6B,YAAY,CAAC,CAACE,MAAM,GAAIA,MAAM,GAAGC,IAAT,GAAgB,GAA3B,IAAmChC,KAApC,CAAnB;AACH,CAFM;AAIP,OAAO,MAAM6B,YAAY,GAAIE,MAAD,IAAY;AACpC,SAAOkB,MAAM,CAACC,UAAU,CAACnB,MAAD,CAAV,CAAmBoB,OAAnB,CAA2B,CAA3B,CAAD,CAAb;AACH,CAFM;AAIP,OAAO,MAAM;AAAE9B,EAAAA,UAAF;AAAcY,EAAAA,aAAd;AAA6BK,EAAAA,KAA7B;AAAoCH,EAAAA,aAApC;AAAmDE,EAAAA;AAAnD,IAAqEnB,SAAS,CAACkC,OAArF;AAEP,eAAelC,SAAS,CAACmC,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchAPI } from '../../utils/dataFetching';\n\nconst initialState = {\n    products: [],\n    count: 0,\n    total: 0\n};\n\nexport const getCart = createAsyncThunk(\n    'cart/getCart',\n    async (_, { rejectWithValue }) => {\n        try {\n            const requestObject = {\n                method: 'GET',\n                url: 'cart'\n            };\n\n            const { data, message } = await fetchAPI(requestObject);\n            return { data, message };\n        } catch (err) {\n            console.error(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const saveCart = createAsyncThunk(\n    'cart/saveCart',\n    async (_, { rejectWithValue, getState }) => {\n        try {\n            const { products, count, total } = getState().cart;\n\n            const requestObject = {\n                url: 'save/cart',\n                method: 'POST',\n                body: {\n                    products: readyCartData(products),\n                    count,\n                    total\n                }\n            };\n\n            const { message } = await fetchAPI(requestObject);\n            return { message };\n        } catch (err) {\n            console.error(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        addProduct(state, { payload }) {\n            const product = state.products.find(p => p.data.id === payload.id);\n\n            if (product) product.count += 1;\n            else state.products.push({ data: payload, count: 1 });\n\n            state.total = fixPrecision(state.total + getFinalPrice(payload.amount, payload.sale));\n            state.count += 1;\n        },\n        removeProduct(state, { payload: { id } }) {\n            state.products = state.products.filter(product => {\n                if (product.data.id === id) {\n                    state.count -= product.count;\n                    state.total = fixPrecision(state.total - getFinalPrice(product.data.amount, product.data.sale, product.count));\n                    return false;\n                }\n                return true;\n            });\n        },\n        increaseCount(state, { payload: { id } }) {\n            state.products = state.products.map(product => {\n                if (product.data.id === id) {\n                    state.count += 1;\n                    state.total = fixPrecision(state.total + getFinalPrice(product.data.amount, product.data.sale));\n                    product.count += 1;\n                }\n                return product;\n            });\n        },\n        decreaseCount(state, { payload: { id } }) {\n            state.products = state.products.filter(product => {\n                if (product.data.id === id) {\n                    state.count -= 1;\n                    state.total = fixPrecision(state.total - getFinalPrice(product.data.amount, product.data.sale));\n                    product.count -= 1;\n                    if (product.count === 0) return false;\n                }\n                return true;\n            });\n        },\n        empty(state) {\n            state.products = [];\n            state.count = 0;\n            state.total = 0;\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getCart.fulfilled, (state, { payload: { data } }) => {\n            if (data.empty) {\n                state.count = 0;\n                state.total = 0;\n                state.products = [];\n            } else {\n                state.count = data.count;\n                state.total = data.total;\n                state.products = data.products.map(({ product, quantity }) => ({ data: filterAction(product), count: quantity }));\n            }\n        });\n        builder.addDefaultCase(state => state);\n    }\n});\n\nexport const readyCartData = (products) => {\n    return products.map(product => (\n        {\n            id: product.data.id,\n            count: product.count\n        }\n    ));\n};\n\nexport const filterAction = (payload) => {\n    return {\n        id: payload.id,\n        title: payload.title,\n        subtitle: payload.subtitle,\n        image: payload.image,\n        amount: payload.amount,\n        sale: payload.sale\n    };\n};\n\nexport const getFinalPrice = (amount, sale, count = 1) => {\n    return fixPrecision((amount - (amount * sale / 100)) * count);\n};\n\nexport const fixPrecision = (amount) => {\n    return Number(parseFloat(amount).toFixed(2));\n};\n\nexport const { addProduct, removeProduct, empty, increaseCount, decreaseCount } = cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}