{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCookies, fetchAPI } from '../../utils/dataFetching';\nconst cookies = fetchCookies();\nconst initialState = {\n  loggedIn: !!cookies['auth-uid'],\n  user: cookies['auth-uid']\n};\nexport const signup = createAsyncThunk('auth/signup', async (input, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const requestObject = {\n      method: 'POST',\n      url: 'signup',\n      body: input\n    };\n    const {\n      data,\n      message\n    } = await fetchAPI(requestObject);\n    return {\n      user: data.user.id,\n      message\n    };\n  } catch (err) {\n    console.error(err);\n    return rejectWithValue(err);\n  }\n});\nexport const login = createAsyncThunk('auth/login', async (_ref2, _ref3) => {\n  let {\n    email,\n    password\n  } = _ref2;\n  let {\n    rejectWithValue\n  } = _ref3;\n\n  try {\n    const requestObject = {\n      method: 'POST',\n      url: 'login',\n      body: {\n        email,\n        password\n      }\n    };\n    const {\n      data,\n      message\n    } = await fetchAPI(requestObject);\n    return {\n      user: data.user.id,\n      message\n    };\n  } catch (err) {\n    console.error(err);\n    return rejectWithValue(err);\n  }\n});\nexport const logout = createAsyncThunk('auth/logout', async (_, _ref4) => {\n  let {\n    rejectWithValue\n  } = _ref4;\n\n  try {\n    const requestObject = {\n      method: 'GET',\n      url: 'logout'\n    };\n    const {\n      message\n    } = await fetchAPI(requestObject);\n    return {\n      message\n    };\n  } catch (err) {\n    console.error(err);\n    return rejectWithValue(err);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(signup.fulfilled, (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.loggedIn = true;\n      state.user = payload;\n    });\n    builder.addCase(login.fulfilled, (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.loggedIn = true;\n      state.user = payload;\n    });\n    builder.addCase(logout.fulfilled, state => {\n      state.loggedIn = false;\n      state.user = null;\n    });\n    builder.addDefaultCase(state => state);\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["/home/yukta/Desktop/Learning/trainee_backend_frontend/e-commerce/src/redux/slices/authSlice.js"],"names":["createAsyncThunk","createSlice","fetchCookies","fetchAPI","cookies","initialState","loggedIn","user","signup","input","rejectWithValue","requestObject","method","url","body","data","message","id","err","console","error","login","email","password","logout","_","authSlice","name","extraReducers","builder","addCase","fulfilled","state","payload","addDefaultCase","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCookies, fetchAPI } from '../../utils/dataFetching';\n\nconst cookies = fetchCookies();\n\nconst initialState = {\n    loggedIn: !!cookies['auth-uid'],\n    user: cookies['auth-uid']\n};\n\nexport const signup = createAsyncThunk(\n    'auth/signup',\n    async (input, { rejectWithValue }) => {\n        try {\n            const requestObject = {\n                method: 'POST',\n                url: 'signup',\n                body: input\n            };\n\n            const { data, message } = await fetchAPI(requestObject);\n            return { user: data.user.id, message };\n        } catch (err) {\n            console.error(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const login = createAsyncThunk(\n    'auth/login',\n    async ({ email, password }, { rejectWithValue }) => {\n        try {\n            const requestObject = {\n                method: 'POST',\n                url: 'login',\n                body: { email, password }\n            };\n\n            const { data, message } = await fetchAPI(requestObject);\n\n            return { user: data.user.id, message };\n        } catch (err) {\n            console.error(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\n    'auth/logout',\n    async (_, { rejectWithValue }) => {\n        try {\n            const requestObject = {\n                method: 'GET',\n                url: 'logout'\n            };\n\n            const { message } = await fetchAPI(requestObject);\n            return { message };\n        } catch (err) {\n            console.error(err);\n            return rejectWithValue(err);\n        }\n    }\n);\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    extraReducers: (builder) => {\n        builder.addCase(signup.fulfilled, (state, { payload }) => {\n            state.loggedIn = true;\n            state.user = payload;\n        });\n        builder.addCase(login.fulfilled, (state, { payload }) => {\n            state.loggedIn = true;\n            state.user = payload;\n        });\n        builder.addCase(logout.fulfilled, (state) => {\n            state.loggedIn = false;\n            state.user = null;\n        });\n        builder.addDefaultCase(state => state);\n    }\n});\n\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}