{"ast":null,"code":"import cookie from 'cookie';\n\nconst fetchAPI = async _ref => {\n  let {\n    method,\n    url,\n    body = {},\n    isFormData = false,\n    queryParams = false\n  } = _ref;\n\n  try {\n    const headers = new Headers();\n    !isFormData && headers.append('Content-Type', 'application/json');\n    headers.append('Accept', 'application/json');\n    const requestObject = {\n      method,\n      headers,\n      credentials: 'include'\n    };\n\n    if (method !== 'GET' && body) {\n      requestObject.body = !isFormData ? JSON.stringify(body) : body;\n    }\n\n    if (queryParams) {\n      queryParams = new URLSearchParams(queryParams).toString();\n      url += `?${queryParams}`;\n    }\n\n    const response = await fetch(`/api/${url}`, requestObject);\n    let data;\n\n    try {\n      data = await response.json();\n    } catch (err) {\n      console.error(err);\n      throw new Error('Failed to parse Response Data');\n    }\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    return {\n      status: response.status,\n      data: data.body,\n      message: data.message\n    };\n  } catch (err) {\n    console.error(err);\n    throw new Error(err.message || 'Something went wrong');\n  }\n};\n\nconst fetchCookies = () => {\n  return cookie.parse(document.cookie);\n};\n\nexport { fetchAPI, fetchCookies };","map":{"version":3,"sources":["/home/yukta/Desktop/Learning/trainee_backend_frontend/e-commerce/src/utils/dataFetching.js"],"names":["cookie","fetchAPI","method","url","body","isFormData","queryParams","headers","Headers","append","requestObject","credentials","JSON","stringify","URLSearchParams","toString","response","fetch","data","json","err","console","error","Error","ok","message","status","fetchCookies","parse","document"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,QAAQ,GAAG,cAA+E;AAAA,MAAxE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,GAAV;AAAeC,IAAAA,IAAI,GAAG,EAAtB;AAA0BC,IAAAA,UAAU,GAAG,KAAvC;AAA8CC,IAAAA,WAAW,GAAG;AAA5D,GAAwE;;AAC5F,MAAI;AACA,UAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACA,KAACH,UAAD,IAAeE,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B,CAAf;AACAF,IAAAA,OAAO,CAACE,MAAR,CAAe,QAAf,EAAyB,kBAAzB;AAEA,UAAMC,aAAa,GAAG;AAAER,MAAAA,MAAF;AAAUK,MAAAA,OAAV;AAAmBI,MAAAA,WAAW,EAAE;AAAhC,KAAtB;;AAEA,QAAIT,MAAM,KAAK,KAAX,IAAoBE,IAAxB,EAA8B;AAC1BM,MAAAA,aAAa,CAACN,IAAd,GAAqB,CAACC,UAAD,GAAcO,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAd,GAAqCA,IAA1D;AACH;;AAED,QAAIE,WAAJ,EAAiB;AACbA,MAAAA,WAAW,GAAG,IAAIQ,eAAJ,CAAoBR,WAApB,EAAiCS,QAAjC,EAAd;AACAZ,MAAAA,GAAG,IAAK,IAAGG,WAAY,EAAvB;AACH;;AAED,UAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,QAAOd,GAAI,EAAb,EAAgBO,aAAhB,CAA5B;AAEA,QAAIQ,IAAJ;;AACA,QAAI;AACAA,MAAAA,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACH,KAFD,CAEE,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,YAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,QAAI,CAACP,QAAQ,CAACQ,EAAd,EAAkB;AACd,YAAM,IAAID,KAAJ,CAAUL,IAAI,CAACO,OAAf,CAAN;AACH;;AAED,WAAO;AAAEC,MAAAA,MAAM,EAAEV,QAAQ,CAACU,MAAnB;AAA2BR,MAAAA,IAAI,EAAEA,IAAI,CAACd,IAAtC;AAA4CqB,MAAAA,OAAO,EAAEP,IAAI,CAACO;AAA1D,KAAP;AACH,GA/BD,CA+BE,OAAOL,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM,IAAIG,KAAJ,CAAUH,GAAG,CAACK,OAAJ,IAAe,sBAAzB,CAAN;AACH;AAEJ,CArCD;;AAuCA,MAAME,YAAY,GAAG,MAAM;AACvB,SAAO3B,MAAM,CAAC4B,KAAP,CAAaC,QAAQ,CAAC7B,MAAtB,CAAP;AACH,CAFD;;AAIA,SAASC,QAAT,EAAmB0B,YAAnB","sourcesContent":["import cookie from 'cookie';\n\nconst fetchAPI = async ({ method, url, body = {}, isFormData = false, queryParams = false }) => {\n    try {\n        const headers = new Headers();\n        !isFormData && headers.append('Content-Type', 'application/json');\n        headers.append('Accept', 'application/json');\n\n        const requestObject = { method, headers, credentials: 'include' };\n\n        if (method !== 'GET' && body) {\n            requestObject.body = !isFormData ? JSON.stringify(body) : body;\n        }\n\n        if (queryParams) {\n            queryParams = new URLSearchParams(queryParams).toString();\n            url += `?${queryParams}`;\n        }\n\n        const response = await fetch(`/api/${url}`, requestObject);\n\n        let data;\n        try {\n            data = await response.json();\n        } catch (err) {\n            console.error(err);\n            throw new Error('Failed to parse Response Data');\n        }\n\n        if (!response.ok) {\n            throw new Error(data.message);\n        }\n\n        return { status: response.status, data: data.body, message: data.message };\n    } catch (err) {\n        console.error(err);\n        throw new Error(err.message || 'Something went wrong');\n    }\n\n};\n\nconst fetchCookies = () => {\n    return cookie.parse(document.cookie);\n};\n\nexport { fetchAPI, fetchCookies };"]},"metadata":{},"sourceType":"module"}